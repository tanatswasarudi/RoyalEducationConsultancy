(function(){var __webpack_exports__={},OSF=OSF||{},Agave,hexCode;!function(e){var t,n;t=e.Utils||(e.Utils={}),n=function(){function e(e){this._internalStorage=e}return e.prototype.getItem=function(e){try{return this._internalStorage&&this._internalStorage.getItem(e)}catch(e){return null}},e.prototype.setItem=function(e,t){try{this._internalStorage&&this._internalStorage.setItem(e,t)}catch(e){}},e.prototype.clear=function(){try{this._internalStorage&&this._internalStorage.clear()}catch(e){}},e.prototype.removeItem=function(e){try{this._internalStorage&&this._internalStorage.removeItem(e)}catch(e){}},e.prototype.getKeysWithPrefix=function(e){var t=[];try{for(var n=this._internalStorage&&this._internalStorage.length||0,o=0;o<n;o++){var r=this._internalStorage.key(o);0===r.indexOf(e)&&t.push(r)}}catch(e){}return t},e}(),t.SafeStorage=n,e.Utils}(Agave||(Agave={})),OSF.OUtil=function(){var e=-1,t="&_xdm_Info=",n="_xdm_",o="#",r={},a=null,i=null,s=(new Date).getTime();function c(){var e=2147483647*Math.random();return(e^=s^(new Date).getMilliseconds()<<Math.floor(21*Math.random())).toString(16)}function l(){if(!a){try{var e=window.sessionStorage}catch(t){e=null}a=new Agave.Utils.SafeStorage(e)}return a}return{set_entropy:function(e){if("string"==typeof e)for(var t=0;t<e.length;t+=4){for(var n=0,o=0;o<4&&t+o<e.length;o++)n=(n<<8)+e.charCodeAt(t+o);s^=n}else s^="number"==typeof e?e:2147483647*Math.random();s&=2147483647},extend:function(e,t){var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e,e.uber=t.prototype,t.prototype.constructor===Object.prototype.constructor&&(t.prototype.constructor=t)},setNamespace:function(e,t){t&&e&&!t[e]&&(t[e]={})},unsetNamespace:function(e,t){t&&e&&t[e]&&delete t[e]},loadScript:function(e,t,n){if(e&&t){var o=window.document,a=r[e];if(a)a.loaded?t():a.pendingCallbacks.push(t);else{var i=o.createElement("script");i.type="text/javascript",a={loaded:!1,pendingCallbacks:[t],timer:null},r[e]=a;var s=function(){null!=a.timer&&(clearTimeout(a.timer),delete a.timer),a.loaded=!0;for(var e=a.pendingCallbacks.length,t=0;t<e;t++)a.pendingCallbacks.shift()()},c=function(){delete r[e],null!=a.timer&&(clearTimeout(a.timer),delete a.timer);for(var t=a.pendingCallbacks.length,n=0;n<t;n++)a.pendingCallbacks.shift()()};i.readyState?i.onreadystatechange=function(){"loaded"!=i.readyState&&"complete"!=i.readyState||(i.onreadystatechange=null,s())}:i.onload=s,i.onerror=c,n=n||3e4,a.timer=setTimeout(c,n),i.src=e,o.getElementsByTagName("head")[0].appendChild(i)}}},loadCSS:function(e){if(e){var t=window.document,n=t.createElement("link");n.type="text/css",n.rel="stylesheet",n.href=e,t.getElementsByTagName("head")[0].appendChild(n)}},parseEnum:function(e,t){var n=t[e.trim()];if(void 0===n)throw Sys.Debug.trace("invalid enumeration string:"+e),Error.argument("str");return n},delayExecutionAndCache:function(){var e={calc:arguments[0]};return function(){return e.calc&&(e.val=e.calc.apply(this,arguments),delete e.calc),e.val}},getUniqueId:function(){return(e+=1).toString()},formatString:function(){var e=arguments,t=e[0];return t.replace(/{(\d+)}/gm,(function(t,n){var o=parseInt(n,10)+1;return void 0===e[o]?"{"+n+"}":e[o]}))},generateConversationId:function(){return[c(),c(),(new Date).getTime().toString()].join("_")},getFrameNameAndConversationId:function(e,t){var o=n+e+this.generateConversationId();return t.setAttribute("name",o),this.generateConversationId()},addXdmInfoAsHash:function(e,n){var r=(e=e.trim()||"").split(o),a=r.shift(),i=r.join(o);return[a,o,i,t,n].join("")},parseXdmInfo:function(e){return OSF.OUtil.parseXdmInfoWithGivenFragment(e,window.location.hash)},parseXdmInfoWithGivenFragment:function(e,o){var r=o.split(t),a=r.length>1?r[r.length-1]:null,i=l();if(!e&&i){var s=window.name.indexOf(n);if(s>-1){var c=window.name.indexOf(";",s);-1==c&&(c=window.name.length);var u=window.name.substring(s,c);a?i.setItem(u,a):a=i.getItem(u)}}return a},getConversationId:function(){var e=window.location.search,t=null;if(e){var n=e.indexOf("&");(t=n>0?e.substring(1,n):e.substr(1))&&"="===t.charAt(t.length-1)&&(t=t.substring(0,t.length-1))&&(t=decodeURIComponent(t))}return t},getInfoItems:function(e){var t=e.split("$");return void 0===t[1]&&(t=e.split("|")),t},getConversationUrl:function(){var e="",t=OSF.OUtil.parseXdmInfo(!0);if(t){var n=OSF.OUtil.getInfoItems(t);null!=n&&n.length>=3&&(e=n[2])}return e},validateParamObject:function(e,t,n){var o=Function._validateParams(arguments,[{name:"params",type:Object,mayBeNull:!1},{name:"expectedProperties",type:Object,mayBeNull:!1},{name:"callback",type:Function,mayBeNull:!0}]);if(o)throw o;for(var r in t)if(o=Function._validateParameter(e[r],t[r],r))throw o},writeProfilerMark:function(e){window.msWriteProfilerMark&&(window.msWriteProfilerMark(e),"undefined"!=typeof Sys&&Sys&&Sys.Debug&&Sys.Debug.trace(e))},outputDebug:function(e){"undefined"!=typeof Sys&&Sys&&Sys.Debug&&Sys.Debug.trace(e)},defineNondefaultProperty:function(e,t,n,o){for(var r in n=n||{},o){var a=o[r];null==n[a]&&(n[a]=!0)}return Object.defineProperty(e,t,n),e},defineNondefaultProperties:function(e,t,n){for(var o in t=t||{})OSF.OUtil.defineNondefaultProperty(e,o,t[o],n);return e},defineEnumerableProperty:function(e,t,n){return OSF.OUtil.defineNondefaultProperty(e,t,n,["enumerable"])},defineEnumerableProperties:function(e,t){return OSF.OUtil.defineNondefaultProperties(e,t,["enumerable"])},defineMutableProperty:function(e,t,n){return OSF.OUtil.defineNondefaultProperty(e,t,n,["writable","enumerable","configurable"])},defineMutableProperties:function(e,t){return OSF.OUtil.defineNondefaultProperties(e,t,["writable","enumerable","configurable"])},finalizeProperties:function(e,t){t=t||{};for(var n=Object.getOwnPropertyNames(e),o=n.length,r=0;r<o;r++){var a=n[r],i=Object.getOwnPropertyDescriptor(e,a);i.get||i.set||(i.writable=t.writable||!1),i.configurable=t.configurable||!1,i.enumerable=t.enumerable||!0,Object.defineProperty(e,a,i)}return e},mapList:function(e,t){var n=[];if(e)for(var o in e)n.push(t(e[o]));return n},listContainsKey:function(e,t){for(var n in e)if(t==n)return!0;return!1},listContainsValue:function(e,t){for(var n in e)if(t==e[n])return!0;return!1},augmentList:function(e,t){var n=e.push?function(t,n){e.push(n)}:function(t,n){e[t]=n};for(var o in t)n(o,t[o])},redefineList:function(e,t){for(var n in e)delete e[n];for(var o in t)e[o]=t[o]},isArray:function(e){return"[object Array]"===Object.prototype.toString.apply(e)},isFunction:function(e){return"[object Function]"===Object.prototype.toString.apply(e)},isDate:function(e){return"[object Date]"===Object.prototype.toString.apply(e)},addEventListener:function(e,t,n){e.addEventListener?e.addEventListener(t,n,!1):Sys.Browser.agent===Sys.Browser.InternetExplorer&&e.attachEvent?e.attachEvent("on"+t,n):e["on"+t]=n},removeEventListener:function(e,t,n){e.removeEventListener?e.removeEventListener(t,n,!1):Sys.Browser.agent===Sys.Browser.InternetExplorer&&e.detachEvent?e.detachEvent("on"+t,n):e["on"+t]=null},encodeBase64:function(e){if(!e)return e;var t,n,o,r,a,i,s,c=[],l=[],u=0,f=e.length;do{t=e.charCodeAt(u++),n=e.charCodeAt(u++),o=e.charCodeAt(u++),s=0,r=255&t,a=t>>8,i=255&n,l[s++]=r>>2,l[s++]=(3&r)<<4|a>>4,l[s++]=(15&a)<<2|i>>6,l[s++]=63&i,isNaN(n)||(r=n>>8,a=255&o,i=o>>8,l[s++]=r>>2,l[s++]=(3&r)<<4|a>>4,l[s++]=(15&a)<<2|i>>6,l[s++]=63&i),isNaN(n)?l[s-1]=64:isNaN(o)&&(l[s-2]=64,l[s-1]=64);for(var m=0;m<s;m++)c.push("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(l[m]))}while(u<f);return c.join("")},getSessionStorage:function(){return l()},getLocalStorage:function(){if(!i){try{var e=window.localStorage}catch(t){e=null}i=new Agave.Utils.SafeStorage(e)}return i},convertIntToCssHexColor:function(e){return"#"+(Number(e)+16777216).toString(16).slice(-6)},attachClickHandler:function(e,t){e.onclick=function(e){t()},e.ontouchend=function(e){t(),e.preventDefault()}},getQueryStringParamValue:function(e,t){var n=Function._validateParams(arguments,[{name:"queryString",type:String,mayBeNull:!1},{name:"paramName",type:String,mayBeNull:!1}]);if(n)return Sys.Debug.trace("OSF_Outil_getQueryStringParamValue: Parameters cannot be null."),"";var o=new RegExp("[\\?&]"+t+"=([^&#]*)","i");return o.test(e)?o.exec(e)[1]:(Sys.Debug.trace("OSF_Outil_getQueryStringParamValue: The parameter is not found."),"")},isiOS:function(){return!!window.navigator.userAgent.match(/(iPad|iPhone|iPod)/g)},shallowCopy:function(e){var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}}}(),OSF.OUtil.Guid=(hexCode=["0","1","2","3","4","5","6","7","8","9","a","b","c","d","e","f"],{generateNewGuid:function(){for(var e="",t=(new Date).getTime(),n=0;n<32&&t>0;n++)8!=n&&12!=n&&16!=n&&20!=n||(e+="-"),e+=hexCode[t%16],t=Math.floor(t/16);for(;n<32;n++)8!=n&&12!=n&&16!=n&&20!=n||(e+="-"),e+=hexCode[Math.floor(16*Math.random())];return e}}),window.OSF=OSF,OSF.OUtil.setNamespace("Microsoft",window),OSF.OUtil.setNamespace("Office",Microsoft),OSF.OUtil.setNamespace("Common",Microsoft.Office),function(window){"use strict";var stringRegEx=new RegExp('"(\\\\.|[^"\\\\])*"',"g"),trueFalseNullRegEx=new RegExp("\\b(true|false|null)\\b","g"),numbersRegEx=new RegExp("-?(0|([1-9]\\d*))(\\.\\d+)?([eE][+-]?\\d+)?","g"),badBracketsRegEx=new RegExp("[^{:,\\[\\s](?=\\s*\\[)"),badRemainderRegEx=new RegExp("[^\\s\\[\\]{}:,]"),jsonErrorMsg="Cannot deserialize. The data does not correspond to valid JSON.";function addHandler(e,t,n){e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent&&e.attachEvent("on"+t,n)}function getAjaxSerializer(){return"undefined"!=typeof Sys&&void 0!==Sys.Serialization&&void 0!==Sys.Serialization.JavaScriptSerializer?Sys.Serialization.JavaScriptSerializer:null}function deserialize(data,secure,oldDeserialize){var transformed;if(!secure)return oldDeserialize(data);if(window.JSON&&window.JSON.parse)return window.JSON.parse(data);if(transformed=data.replace(stringRegEx,"[]"),transformed=transformed.replace(trueFalseNullRegEx,"[]"),transformed=transformed.replace(numbersRegEx,"[]"),badBracketsRegEx.test(transformed))throw jsonErrorMsg;if(badRemainderRegEx.test(transformed))throw jsonErrorMsg;try{eval("("+data+")")}catch(e){throw jsonErrorMsg}}function patchDeserializer(){var e,t=getAjaxSerializer();return null!==t&&"function"==typeof t.deserialize&&(t.__patchVersion>=1||(e=t.deserialize,t.deserialize=function(t,n){return deserialize(t,!0,e)},t.__patchVersion=1),!0)}patchDeserializer()||addHandler(window,"load",(function(){patchDeserializer()}))}(window),Microsoft.Office.Common.InvokeType={async:0,sync:1,asyncRegisterEvent:2,asyncUnregisterEvent:3,syncRegisterEvent:4,syncUnregisterEvent:5},Microsoft.Office.Common.InvokeResultCode={noError:0,errorInRequest:-1,errorHandlingRequest:-2,errorInResponse:-3,errorHandlingResponse:-4,errorHandlingRequestAccessDenied:-5,errorHandlingMethodCallTimedout:-6},Microsoft.Office.Common.MessageType={request:0,response:1},Microsoft.Office.Common.ActionType={invoke:0,registerEvent:1,unregisterEvent:2},Microsoft.Office.Common.ResponseType={forCalling:0,forEventing:1},Microsoft.Office.Common.MethodObject=function(e,t,n){this._method=e,this._invokeType=t,this._blockingOthers=n},Microsoft.Office.Common.MethodObject.prototype={getMethod:function(){return this._method},getInvokeType:function(){return this._invokeType},getBlockingFlag:function(){return this._blockingOthers}},Microsoft.Office.Common.EventMethodObject=function(e,t){this._registerMethodObject=e,this._unregisterMethodObject=t},Microsoft.Office.Common.EventMethodObject.prototype={getRegisterMethodObject:function(){return this._registerMethodObject},getUnregisterMethodObject:function(){return this._unregisterMethodObject}},Microsoft.Office.Common.ServiceEndPoint=function(e){var t=Function._validateParams(arguments,[{name:"serviceEndPointId",type:String,mayBeNull:!1}]);if(t)throw t;this._methodObjectList={},this._eventHandlerProxyList={},this._Id=e,this._conversations={},this._policyManager=null},Microsoft.Office.Common.ServiceEndPoint.prototype={registerMethod:function(e,t,n,o){var r=Function._validateParams(arguments,[{name:"methodName",type:String,mayBeNull:!1},{name:"method",type:Function,mayBeNull:!1},{name:"invokeType",type:Number,mayBeNull:!1},{name:"blockingOthers",type:Boolean,mayBeNull:!1}]);if(r)throw r;if(n!==Microsoft.Office.Common.InvokeType.async&&n!==Microsoft.Office.Common.InvokeType.sync)throw Error.argument("invokeType");var a=new Microsoft.Office.Common.MethodObject(t,n,o);this._methodObjectList[e]=a},unregisterMethod:function(e){var t=Function._validateParams(arguments,[{name:"methodName",type:String,mayBeNull:!1}]);if(t)throw t;delete this._methodObjectList[e]},registerEvent:function(e,t,n){var o=Function._validateParams(arguments,[{name:"eventName",type:String,mayBeNull:!1},{name:"registerMethod",type:Function,mayBeNull:!1},{name:"unregisterMethod",type:Function,mayBeNull:!1}]);if(o)throw o;var r=new Microsoft.Office.Common.EventMethodObject(new Microsoft.Office.Common.MethodObject(t,Microsoft.Office.Common.InvokeType.syncRegisterEvent,!1),new Microsoft.Office.Common.MethodObject(n,Microsoft.Office.Common.InvokeType.syncUnregisterEvent,!1));this._methodObjectList[e]=r},registerEventEx:function(e,t,n,o,r){var a=Function._validateParams(arguments,[{name:"eventName",type:String,mayBeNull:!1},{name:"registerMethod",type:Function,mayBeNull:!1},{name:"registerMethodInvokeType",type:Number,mayBeNull:!1},{name:"unregisterMethod",type:Function,mayBeNull:!1},{name:"unregisterMethodInvokeType",type:Number,mayBeNull:!1}]);if(a)throw a;var i=new Microsoft.Office.Common.EventMethodObject(new Microsoft.Office.Common.MethodObject(t,n,!1),new Microsoft.Office.Common.MethodObject(o,r,!1));this._methodObjectList[e]=i},unregisterEvent:function(e){var t=Function._validateParams(arguments,[{name:"eventName",type:String,mayBeNull:!1}]);if(t)throw t;this.unregisterMethod(e)},registerConversation:function(e,t){var n=Function._validateParams(arguments,[{name:"conversationId",type:String,mayBeNull:!1},{name:"conversationUrl",type:String,mayBeNull:!1,optional:!0}]);if(n)throw n;this._conversations[e]=t||!0},unregisterConversation:function(e){var t=Function._validateParams(arguments,[{name:"conversationId",type:String,mayBeNull:!1}]);if(t)throw t;delete this._conversations[e]},setPolicyManager:function(e){var t=Function._validateParams(arguments,[{name:"policyManager",type:Object,mayBeNull:!1}]);if(t)throw t;if(!e.checkPermission)throw Error.argument("policyManager");this._policyManager=e},getPolicyManager:function(){return this._policyManager}},Microsoft.Office.Common.ClientEndPoint=function(e,t,n){var o=Function._validateParams(arguments,[{name:"conversationId",type:String,mayBeNull:!1},{name:"targetWindow",mayBeNull:!1},{name:"targetUrl",type:String,mayBeNull:!1}]);if(o)throw o;if(!t.postMessage)throw Error.argument("targetWindow");this._conversationId=e,this._targetWindow=t,this._targetUrl=n,this._callingIndex=0,this._callbackList={},this._eventHandlerList={}},Microsoft.Office.Common.ClientEndPoint.prototype={invoke:function(e,t,n){var o=Function._validateParams(arguments,[{name:"targetMethodName",type:String,mayBeNull:!1},{name:"callback",type:Function,mayBeNull:!0},{name:"param",mayBeNull:!0}]);if(o)throw o;var r=this._callingIndex++,a=new Date,i={callback:t,createdOn:a.getTime()};n&&"object"==typeof n&&"number"==typeof n.__timeout__&&(i.timeout=n.__timeout__,delete n.__timeout__),this._callbackList[r]=i;try{var s=new Microsoft.Office.Common.Request(e,Microsoft.Office.Common.ActionType.invoke,this._conversationId,r,n),c=Microsoft.Office.Common.MessagePackager.envelope(s);this._targetWindow.postMessage(c,this._targetUrl),Microsoft.Office.Common.XdmCommunicationManager._startMethodTimeoutTimer()}catch(e){try{null!==t&&t(Microsoft.Office.Common.InvokeResultCode.errorInRequest,e)}finally{delete this._callbackList[r]}}},registerForEvent:function(e,t,n,o){var r=Function._validateParams(arguments,[{name:"targetEventName",type:String,mayBeNull:!1},{name:"eventHandler",type:Function,mayBeNull:!1},{name:"callback",type:Function,mayBeNull:!0},{name:"data",mayBeNull:!0,optional:!0}]);if(r)throw r;var a=this._callingIndex++,i=new Date;this._callbackList[a]={callback:n,createdOn:i.getTime()};try{var s=new Microsoft.Office.Common.Request(e,Microsoft.Office.Common.ActionType.registerEvent,this._conversationId,a,o),c=Microsoft.Office.Common.MessagePackager.envelope(s);this._targetWindow.postMessage(c,this._targetUrl),Microsoft.Office.Common.XdmCommunicationManager._startMethodTimeoutTimer(),this._eventHandlerList[e]=t}catch(e){try{null!==n&&n(Microsoft.Office.Common.InvokeResultCode.errorInRequest,e)}finally{delete this._callbackList[a]}}},unregisterForEvent:function(e,t,n){var o=Function._validateParams(arguments,[{name:"targetEventName",type:String,mayBeNull:!1},{name:"callback",type:Function,mayBeNull:!0},{name:"data",mayBeNull:!0,optional:!0}]);if(o)throw o;var r=this._callingIndex++,a=new Date;this._callbackList[r]={callback:t,createdOn:a.getTime()};try{var i=new Microsoft.Office.Common.Request(e,Microsoft.Office.Common.ActionType.unregisterEvent,this._conversationId,r,n),s=Microsoft.Office.Common.MessagePackager.envelope(i);this._targetWindow.postMessage(s,this._targetUrl),Microsoft.Office.Common.XdmCommunicationManager._startMethodTimeoutTimer()}catch(e){try{null!==t&&t(Microsoft.Office.Common.InvokeResultCode.errorInRequest,e)}finally{delete this._callbackList[r]}}finally{delete this._eventHandlerList[e]}}},Microsoft.Office.Common.XdmCommunicationManager=function(){var e=[],t=null,n=!1,o=null,r=65e3,a=r,i={},s={},c=!1;function l(){if(null!==t){if(!n)if(e.length>0){var o=e.shift();n=o.getInvokeBlockingFlag(),o.invoke()}else clearInterval(t),t=null}else Sys.Debug.trace("channel is not ready.")}function u(){if(o){var e,t,n=0,r=new Date;for(var i in s)for(var c in(e=s[i])._callbackList){var l=e._callbackList[c];if((t=l.timeout?l.timeout:a)>=0&&Math.abs(r.getTime()-l.createdOn)>=t)try{l.callback&&l.callback(Microsoft.Office.Common.InvokeResultCode.errorHandlingMethodCallTimedout,null)}finally{delete e._callbackList[c]}else n++}0===n&&(clearInterval(o),o=null)}else Sys.Debug.trace("channel is not ready.")}function f(){n=!1}function m(e,t){var n,o,r=!1;return!0===e||(e&&t&&e.length&&t.length?(n=document.createElement("a"),o=document.createElement("a"),n.href=e,o.href=t,r=n.hostname==o.hostname&&n.protocol==o.protocol&&n.port==o.port,delete n,r):r)}function d(n){if(""!=n.data){var o;try{o=Microsoft.Office.Common.MessagePackager.unenvelope(n.data)}catch(e){return}if(void 0===o._messageType)return;if(o._messageType===Microsoft.Office.Common.MessageType.request){var r=null==n.origin||"null"==n.origin?o._origin:n.origin;try{var a=function(e){for(var t in i)if(i[t]._conversations[e])return i[t];throw Sys.Debug.trace("Unknown conversation Id."),Error.argument("conversationId")}(o._conversationId);if(!m(a._conversations[o._conversationId],n.origin))throw"Failed origin check";var c=a.getPolicyManager();if(c&&!c.checkPermission(o._conversationId,o._actionName,o._data))throw"Access Denied";var u=function(e,t){var n=e._methodObjectList[t._actionName];if(!n)throw Sys.Debug.trace("The specified method is not registered on service endpoint:"+t._actionName),Error.argument("messageObject");return t._actionType===Microsoft.Office.Common.ActionType.invoke?n:t._actionType===Microsoft.Office.Common.ActionType.registerEvent?n.getRegisterMethodObject():n.getUnregisterMethodObject()}(a,o),d=new Microsoft.Office.Common.InvokeCompleteCallback(n.source,r,o._actionName,o._conversationId,o._correlationId,f),g=new Microsoft.Office.Common.Invoker(u,o._data,d,a._eventHandlerProxyList,o._conversationId,o._actionName);null==t&&(t=setInterval(l,10)),function(t){e.push(t)}(g)}catch(e){var p=Microsoft.Office.Common.InvokeResultCode.errorHandlingRequest;"Access Denied"==e&&(p=Microsoft.Office.Common.InvokeResultCode.errorHandlingRequestAccessDenied);var h=new Microsoft.Office.Common.Response(o._actionName,o._conversationId,o._correlationId,p,Microsoft.Office.Common.ResponseType.forCalling,e),v=Microsoft.Office.Common.MessagePackager.envelope(h);n.source&&n.source.postMessage&&n.source.postMessage(v,r)}}else{if(o._messageType!==Microsoft.Office.Common.MessageType.response)return;var y=function(e){var t=s[e];if(!t)throw Sys.Debug.trace("Unknown conversation Id."),Error.argument("conversationId");return t}(o._conversationId);if(!m(y._targetUrl,n.origin))throw"Failed orgin check";if(o._responseType===Microsoft.Office.Common.ResponseType.forCalling){var _=y._callbackList[o._correlationId];if(_)try{_.callback&&_.callback(o._errorCode,o._data)}finally{delete y._callbackList[o._correlationId]}}else{var O=y._eventHandlerList[o._actionName];null!=O&&O(o._data)}}}}function g(){c||(function(e){if(window.addEventListener)window.addEventListener("message",e,!1);else{if(Sys.Browser.agent!==Sys.Browser.InternetExplorer||!window.attachEvent)throw Sys.Debug.trace("Browser doesn't support the required API."),Error.argument("Browser");window.attachEvent("onmessage",e)}}(d),c=!0)}return{connect:function(e,t,n){var o=s[e];return o||(g(),o=new Microsoft.Office.Common.ClientEndPoint(e,t,n),s[e]=o),o},getClientEndPoint:function(e){var t=Function._validateParams(arguments,[{name:"conversationId",type:String,mayBeNull:!1}]);if(t)throw t;return s[e]},createServiceEndPoint:function(e){g();var t=new Microsoft.Office.Common.ServiceEndPoint(e);return i[e]=t,t},getServiceEndPoint:function(e){var t=Function._validateParams(arguments,[{name:"serviceEndPointId",type:String,mayBeNull:!1}]);if(t)throw t;return i[e]},deleteClientEndPoint:function(e){var t=Function._validateParams(arguments,[{name:"conversationId",type:String,mayBeNull:!1}]);if(t)throw t;delete s[e]},_setMethodTimeout:function(e){var t=Function._validateParams(arguments,[{name:"methodTimeout",type:Number,mayBeNull:!1}]);if(t)throw t;a=e<=0?r:e},_startMethodTimeoutTimer:function(){o||(o=setInterval(u,2e3))}}}(),Microsoft.Office.Common.Message=function(e,t,n,o,r){var a=Function._validateParams(arguments,[{name:"messageType",type:Number,mayBeNull:!1},{name:"actionName",type:String,mayBeNull:!1},{name:"conversationId",type:String,mayBeNull:!1},{name:"correlationId",mayBeNull:!1},{name:"data",mayBeNull:!0,optional:!0}]);if(a)throw a;this._messageType=e,this._actionName=t,this._conversationId=n,this._correlationId=o,this._origin=window.location.href,this._data=void 0===r?null:r},Microsoft.Office.Common.Message.prototype={getActionName:function(){return this._actionName},getConversationId:function(){return this._conversationId},getCorrelationId:function(){return this._correlationId},getOrigin:function(){return this._origin},getData:function(){return this._data},getMessageType:function(){return this._messageType}},Microsoft.Office.Common.Request=function(e,t,n,o,r){Microsoft.Office.Common.Request.uber.constructor.call(this,Microsoft.Office.Common.MessageType.request,e,n,o,r),this._actionType=t},OSF.OUtil.extend(Microsoft.Office.Common.Request,Microsoft.Office.Common.Message),Microsoft.Office.Common.Request.prototype.getActionType=function(){return this._actionType},Microsoft.Office.Common.Response=function(e,t,n,o,r,a){Microsoft.Office.Common.Response.uber.constructor.call(this,Microsoft.Office.Common.MessageType.response,e,t,n,a),this._errorCode=o,this._responseType=r},OSF.OUtil.extend(Microsoft.Office.Common.Response,Microsoft.Office.Common.Message),Microsoft.Office.Common.Response.prototype.getErrorCode=function(){return this._errorCode},Microsoft.Office.Common.Response.prototype.getResponseType=function(){return this._responseType},Microsoft.Office.Common.MessagePackager={envelope:function(e){return Sys.Serialization.JavaScriptSerializer.serialize(e)},unenvelope:function(e){return Sys.Serialization.JavaScriptSerializer.deserialize(e,!0)}},Microsoft.Office.Common.ResponseSender=function(e,t,n,o,r,a){var i=Function._validateParams(arguments,[{name:"requesterWindow",mayBeNull:!1},{name:"requesterUrl",type:String,mayBeNull:!1},{name:"actionName",type:String,mayBeNull:!1},{name:"conversationId",type:String,mayBeNull:!1},{name:"correlationId",mayBeNull:!1},{name:"responsetype",type:Number,maybeNull:!1}]);if(i)throw i;this._requesterWindow=e,this._requesterUrl=t,this._actionName=n,this._conversationId=o,this._correlationId=r,this._invokeResultCode=Microsoft.Office.Common.InvokeResultCode.noError,this._responseType=a;var s=this;this._send=function(e){try{var t=new Microsoft.Office.Common.Response(s._actionName,s._conversationId,s._correlationId,s._invokeResultCode,s._responseType,e),n=Microsoft.Office.Common.MessagePackager.envelope(t);s._requesterWindow.postMessage(n,s._requesterUrl)}catch(e){Sys.Debug.trace("ResponseSender._send error:"+e.message)}}},Microsoft.Office.Common.ResponseSender.prototype={getRequesterWindow:function(){return this._requesterWindow},getRequesterUrl:function(){return this._requesterUrl},getActionName:function(){return this._actionName},getConversationId:function(){return this._conversationId},getCorrelationId:function(){return this._correlationId},getSend:function(){return this._send},setResultCode:function(e){this._invokeResultCode=e}},Microsoft.Office.Common.InvokeCompleteCallback=function(e,t,n,o,r,a){Microsoft.Office.Common.InvokeCompleteCallback.uber.constructor.call(this,e,t,n,o,r,Microsoft.Office.Common.ResponseType.forCalling),this._postCallbackHandler=a;var i=this;this._send=function(e){try{var t=new Microsoft.Office.Common.Response(i._actionName,i._conversationId,i._correlationId,i._invokeResultCode,i._responseType,e),n=Microsoft.Office.Common.MessagePackager.envelope(t);i._requesterWindow.postMessage(n,i._requesterUrl),i._postCallbackHandler()}catch(e){Sys.Debug.trace("InvokeCompleteCallback._send error:"+e.message)}}},OSF.OUtil.extend(Microsoft.Office.Common.InvokeCompleteCallback,Microsoft.Office.Common.ResponseSender),Microsoft.Office.Common.Invoker=function(e,t,n,o,r,a){var i=Function._validateParams(arguments,[{name:"methodObject",mayBeNull:!1},{name:"paramValue",mayBeNull:!0},{name:"invokeCompleteCallback",mayBeNull:!1},{name:"eventHandlerProxyList",mayBeNull:!0},{name:"conversationId",type:String,mayBeNull:!1},{name:"eventName",type:String,mayBeNull:!1}]);if(i)throw i;this._methodObject=e,this._param=t,this._invokeCompleteCallback=n,this._eventHandlerProxyList=o,this._conversationId=r,this._eventName=a},Microsoft.Office.Common.Invoker.prototype={invoke:function(){try{var e;switch(this._methodObject.getInvokeType()){case Microsoft.Office.Common.InvokeType.async:this._methodObject.getMethod()(this._param,this._invokeCompleteCallback.getSend());break;case Microsoft.Office.Common.InvokeType.sync:e=this._methodObject.getMethod()(this._param),this._invokeCompleteCallback.getSend()(e);break;case Microsoft.Office.Common.InvokeType.syncRegisterEvent:var t=this._createEventHandlerProxyObject(this._invokeCompleteCallback);e=this._methodObject.getMethod()(t.getSend(),this._param),this._eventHandlerProxyList[this._conversationId+this._eventName]=t.getSend(),this._invokeCompleteCallback.getSend()(e);break;case Microsoft.Office.Common.InvokeType.syncUnregisterEvent:var n=this._eventHandlerProxyList[this._conversationId+this._eventName];e=this._methodObject.getMethod()(n,this._param),delete this._eventHandlerProxyList[this._conversationId+this._eventName],this._invokeCompleteCallback.getSend()(e);break;case Microsoft.Office.Common.InvokeType.asyncRegisterEvent:var o=this._createEventHandlerProxyObject(this._invokeCompleteCallback);this._methodObject.getMethod()(o.getSend(),this._invokeCompleteCallback.getSend(),this._param),this._eventHandlerProxyList[this._callerId+this._eventName]=o.getSend();break;case Microsoft.Office.Common.InvokeType.asyncUnregisterEvent:var r=this._eventHandlerProxyList[this._callerId+this._eventName];this._methodObject.getMethod()(r,this._invokeCompleteCallback.getSend(),this._param),delete this._eventHandlerProxyList[this._callerId+this._eventName]}}catch(e){this._invokeCompleteCallback.setResultCode(Microsoft.Office.Common.InvokeResultCode.errorInResponse),this._invokeCompleteCallback.getSend()(e)}},getInvokeBlockingFlag:function(){return this._methodObject.getBlockingFlag()},_createEventHandlerProxyObject:function(e){return new Microsoft.Office.Common.ResponseSender(e.getRequesterWindow(),e.getRequesterUrl(),e.getActionName(),e.getConversationId(),e.getCorrelationId(),Microsoft.Office.Common.ResponseType.forEventing)}};var SafeSerializer=function(){function e(){}return e.prototype.Serialize=function(e){try{return Sys.Serialization.JavaScriptSerializer.serialize(e)}catch(e){return null}},e.prototype.Deserialize=function(e){try{return Sys.Serialization.JavaScriptSerializer.deserialize(e,!0)}catch(e){return null}},e}(),AppsDataCacheManager=function(){function e(e,t){this._localStorage=e,this._serializer=t}return e.prototype.GetCacheItem=function(t,n,o){void 0===n&&(n=!0);var r=this._localStorage.getItem(t);if(r){var a=this._serializer.Deserialize(r);if(!n)return a.data;var i=new Date;if(Math.abs(i.getTime()-a.createdOn)<e.msPerDay*a.refreshRate)return a.data;this._localStorage.removeItem(t),o&&(o.cacheExpired=!0)}},e.prototype.SetCacheItem=function(t,n,o){o=o||e.defaultRefreshRateInDays;var r={data:n,createdOn:(new Date).getTime(),refreshRate:o};this._localStorage.setItem(t,this._serializer.Serialize(r))},e.prototype.RemoveCacheItem=function(e){this._localStorage.removeItem(e)},e.prototype.RemoveAll=function(e){for(var t=this._localStorage.getKeysWithPrefix(e),n=0,o=t.length;n<o;n++)this._localStorage.removeItem(t[n])},e.prototype.RemoveMatches=function(e){for(var t=this._localStorage.getKeysWithPrefix(""),n=0,o=t.length;n<o;n++)for(var r=t[n],a=0,i=e.length;a<i;a++)if(e[a].test(r)){this._localStorage.removeItem(r);break}},e.defaultRefreshRateInDays=3,e.msPerDay=864e5,e}();OSF.OUtil.setNamespace("OSF",window),OSF.XmlConstants={MaxXmlSize:4096,MaxElementDepth:10},OSF.Xpath3Provider=function(e,t){this._xmldoc=(new DOMParser).parseFromString(e,"text/xml"),this._evaluator=new XPathEvaluator,this._namespaceMapping={},this._defaultNamespace=null;for(var n,o=t.split(" "),r=0;r<o.length;++r)(n=/xmlns="([^"]*)"/g.exec(o[r]))?this._defaultNamespace=n[1]:(n=/xmlns:([^=]*)="([^"]*)"/g.exec(o[r]))&&(this._namespaceMapping[n[1]]=n[2]);this._resolver=this},OSF.Xpath3Provider.prototype={lookupNamespaceURI:function(e){return this._namespaceMapping[e]||this._defaultNamespace},selectSingleNode:function(e,t){var n=this._evaluator.evaluate(e,t,this._resolver,XPathResult.FIRST_ORDERED_NODE_TYPE,null);return n?n.singleNodeValue:null},selectNodes:function(e,t){var n=this._evaluator.evaluate(e,t,this._resolver,XPathResult.ORDERED_NODE_ITERATOR_TYPE,null),o=[];if(n)for(var r=n.iterateNext();r;)o.push(r),r=n.iterateNext();return o},getDocumentElement:function(){return this._xmldoc.documentElement}},OSF.IEXpathProvider=function(e,t){for(var n=null,o=["MSXML2.DOMDocument.6.0"],r=0;r<o.length;r++)try{(n=new ActiveXObject(o[r])).setProperty("ResolveExternals",!1),n.setProperty("ValidateOnParse",!1),n.setProperty("ProhibitDTD",!0),n.setProperty("MaxXMLSize",OSF.XmlConstants.MaxXmlSize),n.setProperty("MaxElementDepth",OSF.XmlConstants.MaxElementDepth),n.async=!1,n.loadXML(e),n.setProperty("SelectionLanguage","XPath"),n.setProperty("SelectionNamespaces",t);break}catch(e){Sys.Debug.trace("xml doc creating error:"+e)}this._xmldoc=n},OSF.IEXpathProvider.prototype={selectSingleNode:function(e,t){return t.selectSingleNode(e)},selectNodes:function(e,t){return t.selectNodes(e)},getDocumentElement:function(){return this._xmldoc.documentElement}},OSF.XmlProcessor=function(e,t){var n=Function._validateParams(arguments,[{name:"xml",type:String,mayBeNull:!1},{name:"xmlNamespaces",type:String,mayBeNull:!1}]);if(n)throw n;document.implementation&&document.implementation.hasFeature("XPath","3.0")?this._provider=new OSF.Xpath3Provider(e,t):this._provider=new OSF.IEXpathProvider(e,t)},OSF.XmlProcessor.prototype={selectSingleNode:function(e,t){var n=Function._validateParams(arguments,[{name:"xpath",type:String,mayBeNull:!1},{name:"contextNode",mayBeNull:!0,optional:!0}]);if(n)throw n;return t=t||this._provider.getDocumentElement(),this._provider.selectSingleNode(e,t)},selectNodes:function(e,t){var n=Function._validateParams(arguments,[{name:"xpath",type:String,mayBeNull:!1},{name:"contextNode",mayBeNull:!0,optional:!0}]);if(n)throw n;return t=t||this._provider.getDocumentElement(),this._provider.selectNodes(e,t)},getDocumentElement:function(){return this._provider.getDocumentElement()},getNodeValue:function(e){var t=Function._validateParams(arguments,[{name:"node",type:Object,mayBeNull:!1}]);if(t)throw t;return e.text?e.text:e.textContent},_getAttributeLocalName:function(e){return e.localName?e.localName:e.baseName},readAttributes:function(e,t,n){var o,r,a=Function._validateParams(arguments,[{name:"node",type:Object,mayBeNull:!1},{name:"attributesToRead",type:Object,mayBeNull:!1},{name:"objectToFill",type:Object,mayBeNull:!1}]);if(a)throw a;for(var i=0;i<e.attributes.length;i++)for(var s in o=e.attributes[i],r=this._getAttributeLocalName(o),t)r===s&&(n[t[s]]=o.value)}},OSF.OmexAnonymousProvider=function(){var e=!1,t="__OSF_ANONYMOUS_OMEX.",n=new AppsDataCacheManager(OSF.OUtil.getLocalStorage(),new SafeSerializer),o={url:"https://addinsinstallation.store.office.com/appinstall/unauthenticated?cmu={0}&assetid={1}&ret=0",cacheKey:t+"appInstallInfo.{0}.{1}"},r={url:"https://api.addins.store.office.com/appinfo/query?rt=xml",cacheKey:t+"killedApps"},a={url:"https://api.addins.store.office.com/appstate/query?ma={0}:{1}",cacheKey:t+"appState.{0}.{1}"},i='xmlns="urn:schemas-microsoft-com:office:office" xmlns:o="urn:schemas-microsoft-com:office:office"';function s(e,t,n,o,r,a){var i=o;if(e){try{var s={status:t,result:n,failureInfo:null},c=function(e,t,n){null===e.failureInfo&&(e.failureInfo={}),e.failureInfo[t]=n};if(r){var u=-1;if(r.get_statusCode&&(u=r.get_statusCode()),i||(r.get_timedOut&&r.get_timedOut()?i="Request timed out.":r.get_aborted&&r.get_aborted()&&(i="Request aborted.")),u>=400||t===l.Failed||i){c(s,"statusCode",u),c(s,"tagId",a);var f=r.get_webRequest();f&&(f.getResolvedUrl&&c(s,"url",f.getResolvedUrl()),r.getResponseHeader&&f.get_userContext&&f.get_userContext()&&!f.get_userContext().correlationId&&c(s,"correlationId",r.getResponseHeader("X-CorrelationId")))}}i&&(c(s,"message",i),Sys.Debug.trace(i))}catch(e){Sys.Debug.trace("Encountered exception with logging: "+e)}e(s)}}OSF.AppVersion={access:"ZAC150",excel:"ZXL150",excelwebapp:"WAE160",outlook:"ZOL150",outlookwebapp:"MOW150",powerpoint:"ZPP151",powerpointwebapp:"WAP160",project:"ZPJ150",word:"ZWD150",wordwebapp:"WAW160"},OSF.AppSubType={Taskpane:1,Content:2,Contextual:3,Dictionary:4},OSF.ClientAppInfoReturnType={urlOnly:0,etokenOnly:1,both:2};var c=null,l={Succeeded:1,Failed:0};function u(e,t,n,o,r,a){r=r||{};var i=new Sys.Net.WebRequest;for(var s in n)i.get_headers()[s]=n[s];r&&(r.officeVersion&&(i.get_headers()["X-Office-Version"]=r.officeVersion),r.correlationId&&e.indexOf("?")>-1&&(e+="&corr="+r.correlationId)),a&&i.set_body(a),i.set_url(e),i.set_httpVerb(t),i.set_timeout(6e4),i.set_userContext(r),i.add_completed(o),i.invoke()}function f(e,t){var n=e.get_webRequest().get_userContext(),o=e.get_webRequest().get_url();if(e.get_timedOut())Sys.Debug.trace("Request timed out: "+o),s(n.callback,l.Failed,null,null,e,6062418);else if(e.get_aborted())Sys.Debug.trace("Request aborted: "+o),s(n.callback,l.Failed,null,null,e,6062419);else if(e.get_responseAvailable())if(200==e.get_statusCode())try{n._onCompleteHandler(e,t)}catch(t){Sys.Debug.trace("Request failed with exception "+t+": "+o),s(n.callback,l.Failed,t,null,e,6062420)}else{var r=e.get_statusText();Sys.Debug.trace("Request failed with status code "+r+": "+o),s(n.callback,l.Failed,r,null,e,6062421)}else Sys.Debug.trace("Request failed: "+o),s(n.callback,l.Failed,r,null,e,6062422)}function m(e,t){t&&t({status:l.Succeeded,result:!0})}function d(e){var t="";for(var n in e){var o=e[n];null!=o&&""!==o&&(t+="&"+encodeURIComponent(n)+"="+encodeURIComponent(o))}return t}function g(e){var t=e.get_webRequest().get_userContext(),n=e.get_webRequest().get_url();if(e.get_timedOut())Sys.Debug.trace("Request timed out: "+n),s(t.callback,l.Failed,null,null,e,6062357);else if(e.get_aborted())Sys.Debug.trace("Request aborted: "+n),s(t.callback,l.Failed,null,null,e,6062358);else if(e.get_responseAvailable()){var o=e.get_statusText();Sys.Debug.trace("Request to "+n+" came back with the status code: "+o);var r={manifest:"",etoken:"",status:"1"};200==e.get_statusCode()?r.manifest=e.get_responseData():204==e.get_statusCode()||1223==e.get_statusCode()?r.status="4":400==e.get_statusCode()?r.status="10":410==e.get_statusCode()?r.status="3":404==e.get_statusCode()?r.status="2":412==e.get_statusCode()?r.status="15":r.status="9",r.cached=!1,s(t.callback,l.Succeeded,r,null,e,6062359)}else Sys.Debug.trace("Request failed: "+n),s(t.callback,l.Failed,null,null,e,6062360)}function p(e){var t=e.get_webRequest().get_userContext(),n=e.get_webRequest().get_url();if(e.get_timedOut())OsfMsAjaxFactory.msAjaxDebug.trace("Request timed out: "+n),s(t.callback,l.Failed,null,null,e,34366433);else if(e.get_aborted())OsfMsAjaxFactory.msAjaxDebug.trace("Request aborted: "+n),s(t.callback,l.Failed,null,null,e,34366434);else if(e.get_responseAvailable()){var o=e.get_responseData();s(t.callback,l.Succeeded,o,null,e,34366435)}else OsfMsAjaxFactory.msAjaxDebug.trace("Request did not have an available response: "+n),s(t.callback,l.Failed,null,null,e,34366464)}function h(e){var t=e.get_webRequest().get_userContext(),n=e.get_webRequest().get_url();if(e.get_timedOut())OsfMsAjaxFactory.msAjaxDebug.trace("Request timed out: "+n),s(t.callback,l.Failed,null,null,e,34366465);else if(e.get_aborted())OsfMsAjaxFactory.msAjaxDebug.trace("Request aborted: "+n),s(t.callback,l.Failed,null,null,e,34366466);else if(e.get_responseAvailable()){var o=e.get_responseData();s(t.callback,l.Succeeded,o,null,e,34366467)}else OsfMsAjaxFactory.msAjaxDebug.trace("Request did not have an available response: "+n),s(t.callback,l.Failed,null,null,e,34366468)}function v(e){var t={},n=e.get_webRequest().get_userContext(),o=e.get_responseData(),r=new OSF.XmlProcessor(o,i),a=r.getDocumentElement();r.readAttributes(a,{rr:"refreshRate"},t);var c=r.selectSingleNode("//o:lang/o:asset");r.readAttributes(c,{assetid:"assetId",prodid:"productId",ver:"version",state:"state",tdurl:"takeDownUrl",upv:"unsafePreviousVersion",expiry:"expirationDate"},t),s(n.callback,l.Succeeded,t,null,e,6062361)}function y(e){var t=e.get_webRequest().get_userContext(),o=e.get_responseData(),r={},a=new OSF.XmlProcessor(o,i),c=a.getDocumentElement();a.readAttributes(c,{rr:"refreshRate"},r),r.killedApps=[];for(var u,f,m=a.selectNodes("//o:asset"),d=0;d<m.length;++d)u=m[d],f={},a.readAttributes(u,{assetid:"assetId",pid:"productId"},f),r.killedApps.push(f);m.length>=0&&n.SetCacheItem(t.cacheKey,r,r.refreshRate/24),s(t.callback,l.Succeeded,r,null,e,6062362)}function _(e){var t=e.get_webRequest().get_userContext(),n=e.get_webRequest().get_url();if(e.get_timedOut()||e.get_aborted())s(t.callback,l.Failed,null,null,e,6095311);else if(e.get_responseAvailable()){var o=e.get_statusText();Sys.Debug.trace("Request to "+n+" came back with the status code: "+o);var r;r=200==e.get_statusCode()?"1":401==e.get_statusCode()||403==e.get_statusCode()?"2":"3",s(t.callback,l.Succeeded,r,null,"2"!=r?e:null,6095312)}else s(t.callback,l.Failed,null,"Getting authentication status failed.",e,6095313)}return{initialize:function(){if(!e){(c=Microsoft.Office.Common.XdmCommunicationManager.createServiceEndPoint("9EA00E01-D076-4F05-88A9-A8738244BC24")).registerMethod("OMEX_getAppStateAsync",this.getAppStateAsync,Microsoft.Office.Common.InvokeType.async,!1),c.registerMethod("OMEX_getKilledAppsAsync",this.getKilledAppsAsync,Microsoft.Office.Common.InvokeType.async,!1),c.registerMethod("OMEX_getManifestAndETokenAsync",this.getManifestAndETokenAsync,Microsoft.Office.Common.InvokeType.async,!1),c.registerMethod("OMEX_removeCacheAsync",this.removeCacheAsync,Microsoft.Office.Common.InvokeType.async,!1),c.registerMethod("OMEX_clearCacheAsync",this.clearCacheAsync,Microsoft.Office.Common.InvokeType.async,!1),c.registerMethod("OMEX_isProxyReady",m,Microsoft.Office.Common.InvokeType.async,!1),c.registerMethod("OMEX_getAuthNStatus",this.getAuthNStatus,Microsoft.Office.Common.InvokeType.async,!1),c.registerMethod("OMEX_getFirstPartyAddInListAsync",this.getFirstPartyAddInListAsync,Microsoft.Office.Common.InvokeType.async,!1),c.registerMethod("OMEX_getFirstPartyManifestAsync",this.getFirstPartyManifestAsync,Microsoft.Office.Common.InvokeType.async,!1);var t=OSF.OUtil.getConversationId(),n=OSF.OUtil.getConversationUrl();c.registerConversation(t,n),e=!0}},getFirstPartyAddInListAsync:function(e,t){OSF.OUtil.validateParamObject(e,{},t);try{e.callback=t,e._onCompleteHandler=p,u("https://fpastorage.cdn.office.net/firstpartyapp/addins.xml","GET",{"Content-Type":"text/xml"},f,e)}catch(e){OsfMsAjaxFactory.msAjaxDebug.trace("Getting 1st party list failed: "+e),s(t,l.Failed,null,"Getting first party add-in list failed.",null,34366469)}},getFirstPartyManifestAsync:function(e,t){OSF.OUtil.validateParamObject(e,{manifestUrl:{type:String,mayBeNull:!1}},t);try{e.callback=t,e.officeVersion=null,e._onCompleteHandler=h,u(e.manifestUrl,"GET",{},f,e)}catch(n){OsfMsAjaxFactory.msAjaxDebug.trace("Getting 1st party manifest failed for: "+e.path+n),s(t,l.Failed,null,"Getting first party manfiest failed for: "+e.path,null,34366470)}},getAppStateAsync:function(e,t){OSF.OUtil.validateParamObject(e,{assetID:{type:String,mayBeNull:!1},contentMarket:{type:String,mayBeNull:!1},clientName:{type:String,mayBeNull:!0},clientVersion:{type:String,mayBeNull:!0}},t),e.clearAppState=e.clearAppState||!1;try{var n=OSF.OUtil.formatString(a.cacheKey,e.contentMarket,e.assetID);e.callback=t,e.cacheKey=n;var o=a.url;o=OSF.OUtil.formatString(o,e.contentMarket,e.assetID);var r={};r.client=e.clientName,r.cv=e.clientVersion,o+=d(r),e._onCompleteHandler=v,u(o,"GET",{"Content-Type":"text/xml"},f,e)}catch(e){Sys.Debug.trace("Getting app state failed: "+e),s(t,l.Failed,null,"Getting app state failed.",null,6062364)}},getKilledAppsAsync:function(e,t){var o=Function._validateParams(arguments,[{name:"params",type:Object,mayBeNull:!1},{name:"callback",type:Function,mayBeNull:!1}]);if(o)throw o;e.clearKilledApps=e.clearKilledApps||!1;try{var a=r.cacheKey;if(e.clearKilledApps)n.RemoveCacheItem(a);else{var i=n.GetCacheItem(a);if(i)return void s(t,l.Succeeded,i,null,null,6062365)}e.callback=t,e.cacheKey=a;var c=r.url,m={};m.client=e.clientName,m.cv=e.clientVersion,c+=d(m),e._onCompleteHandler=y,u(c,"GET",{"Content-Type":"text/xml"},f,e)}catch(e){Sys.Debug.trace("Getting killed bits failed: "+e),s(t,l.Failed,null,"Getting killed bits failed.",null,6062366)}},getManifestAndETokenAsync:function(e,t){OSF.OUtil.validateParamObject(e,{assetID:{type:String,mayBeNull:!1},applicationName:{type:String,mayBeNull:!1},contentMarket:{type:String,mayBeNull:!1},clientName:{type:String,mayBeNull:!0},clientVersion:{type:String,mayBeNull:!0}},t),e.clearManifest=e.clearManifest||!1;try{var n=OSF.OUtil.formatString(o.cacheKey,e.assetID,e.contentMarket);e.callback=t,e.cacheKey=n;var r=o.url;r=OSF.OUtil.formatString(r,e.contentMarket,e.assetID);var a={};a.client=e.clientName,a.cv=e.clientVersion,u(r+=d(a),"GET",{"Content-Type":"text/xml"},g,e)}catch(e){Sys.Debug.trace("Getting manifest and token failed: "+e),s(t,l.Failed,null,"Getting manifest and token failed.",null,6062368)}},removeCacheAsync:function(e,t){OSF.OUtil.validateParamObject(e,{assetID:{type:String,mayBeNull:!1},applicationName:{type:String,mayBeNull:!1},contentMarket:{type:String,mayBeNull:!1}},t);try{var r;e.clearManifest&&(r=OSF.OUtil.formatString(o.cacheKey,e.assetID,e.contentMarket),n.RemoveCacheItem(r)),e.clearAppState&&(r=OSF.OUtil.formatString(a.cacheKey,e.contentMarket,e.assetID),n.RemoveCacheItem(r)),s(t,l.Succeeded,null,null,null,6062369)}catch(e){Sys.Debug.trace("Removing cache failed: "+e),s(t,l.Failed,null,"Removing cache failed.",null,6062370)}},clearCacheAsync:function(e,o){var r=Function._validateParams(arguments,[{name:"params",type:Object,mayBeNull:!1},{name:"callback",type:Function,mayBeNull:!1}]);if(r)throw r;try{n.RemoveAll(t),s(o,l.Succeeded,null,null,null,6062371)}catch(e){Sys.Debug.trace("Clearing cache failed: "+e),s(o,l.Failed,null,"Clearing cache failed.",null,6062400)}},getAuthNStatus:function(e,t){var n=Function._validateParams(arguments,[{name:"params",type:Object,mayBeNull:!1},{name:"callback",type:Function,mayBeNull:!1}]);if(n)throw n;try{e.callback=t,u("/gatedserviceextension.aspx?fromAR=3","HEAD",{Cookie:document.cookie},_,e)}catch(e){Sys.Debug.trace("Getting authentication status failed: "+e),t({status:l.Failed,result:null})}}}}(),OSF.OmexAnonymousProvider.initialize();var __webpack_export_target__=StorePages="undefined"==typeof StorePages?{}:StorePages;for(var i in __webpack_exports__)__webpack_export_target__[i]=__webpack_exports__[i];__webpack_exports__.__esModule&&Object.defineProperty(__webpack_export_target__,"__esModule",{value:!0})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,